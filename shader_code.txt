Shader Code

shdColor.fsh 
NOTE: We're only editing the fragment shader. Leave the vector shader tab (shdColor.vsh) as it is. 

// simple color change shader
varying vec2 v_vTexcoord;
void main()
{
	// get the existing color and alpha of a texture pixel
	vec4 texRGBA = texture2D(gm_BaseTexture, v_vTexcoord);
	// change the color to green but keep the alpha
	// vec4 colors are red, green, blue, alpha
	// 1.0 = 100% of that color, so we are making every pixel green
	gl_FragColor = vec4(0.0, 1.0, 0.0, texRGBA.a);
}




shdRainbow.fsh
NOTE: We're only editing the fragment shader. Leave the vector shader tab (shdRainbow.vsh) as it is. 

//
// Basic rainbow fragment shader
//
varying vec2 v_vTexcoord;
varying vec4 v_vColour;

uniform vec2 u_uv;

vec3 hsv2rgb(vec3 c) 
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main()
{
	// feel free to experiment with these numbers after you 
	// see the shader working
	float _speed = 1.0;
	float _time = 0.05;
	float _saturation = 1.35;
	float _brightness = 2.82;
	float _section = 2.2;
	float _mix = 0.2;
	
    float pos = (v_vTexcoord.x - u_uv[0]) / (u_uv[1] - u_uv[0]);
    vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord);
    
    vec3 col = vec3(_section * ((_time * _speed) + pos), _saturation, _brightness);
    vec4 finalCol = mix(texColor, vec4(hsv2rgb(col), texColor.a), _mix);
    
    gl_FragColor = v_vColour * finalCol;
}
